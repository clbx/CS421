/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(MegaBasic)
public class MegaBasic{  public static void main(String args []) throws ParseException  {    MegaBasic parser = new MegaBasic(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (MegaBasic.program())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        MegaBasic.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(MegaBasic)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < EQUAL : "=" >
| < PRINT :"print" >
| < IF : "if" >
| < ELSE : "else" >}
TOKEN:
{
  < LBRACE : "{" >
| < RBRACE : "}" >
}
TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}

TOKEN: {  //Identifier
  < IDENT : < LETTER >(< LETTER >|< DIGIT >)* >
| < #LETTER : (["a"-"z","A"-"Z"]) >
  
}

int program():
{}
{
  block() ";"
  {
    return 0;
  }
| ";"
{
  return 1;
}
  
}




FunctionalNode stmt():
{
  FunctionalNode func = new FunctionalNode();
  ExpNode node;
  }
{
  printStmt() { return func; }
  | node = assignment() { func.child = node; return func;}
  | ifStmt() { return func; }
  | block() { return func; }
}



void block():
{
  FunctionalNode root = new FunctionalNode();
}
{
	 < LBRACE > (root=stmt()";")*< RBRACE >
	 //root.next = stmt();
}

void printStmt():
{
	Token tok;
}
{
  < PRINT > tok=< IDENT >
  {
    System.out.println(tok.image);
  }
}


void ifStmt():
{ }
{
  < IF > "(" expression() ")" stmt() < ELSE > stmt()
}



ExpNode assignment():
{
  ExpNode root = new ExpNode();
  ExpNode lnode = null;
  ExpNode rnode = null;
}

{
  lnode=varRef() < EQUAL > rnode=expression()
  {
    root.operator = '=';
    root.left = lnode;
    root.right = rnode;
    root.traverse();
    return root;
  }
}





ExpNode expression() :
{
    ExpNode root = null;
    ExpNode lnode = null;
    ExpNode rnode = null;
    char operationTemp;
}
{
  root = term()((
    < PLUS > {operationTemp = '+';}
    | < MINUS > {operationTemp = '-';}
    )
    rnode = term()
  {
      lnode = root;
      root = new ExpNode();
      root.left = lnode;
      root.right = rnode;
      root.operator = operationTemp;
  }
  )*
  {
    return root;
  }
}

ExpNode term():
{
  ExpNode root = null;
  ExpNode lnode = null;
  ExpNode rnode = null;
  Token tok = null;    
}
{
	root = factor()((
	tok = < MULTIPLY >
	|tok = < DIVIDE >
	)
	rnode = factor()
	{
	  lnode = root;
	  root = new ExpNode();
	  root.left = lnode;
	  root.right = rnode;
	  root.operator = tok.image.charAt(0);
	}
	)*
	{
	  return root;
	}
}

ExpNode factor():
{
  ExpNode node = new ExpNode();
  Token tok;  
}
{
	tok = < CONSTANT > { node.operand = tok.image; node.operator = 'c';}
	{
	  return node;
	}
	| node = varRef()
	{
	  return node;
	}
	| ("("node = expression()")")
	{
	  return node;
	}
}


ExpNode varRef():
{
  ExpNode node = new ExpNode();
  Token tok;
}
{
	tok = < IDENT >
	{
	  node.operand = tok.image;
	  node.operator = 'c';
	  return node;
	}
}














