/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(MiniBasic)

public class MiniBasic
{
  public static SymbolTable symTable = new SymbolTable();

  public static SymbolTable.Entry findSym(String name) {
    SymbolTable.Entry entry;
    entry = symTable.get(name);
    return entry;
  }
  
  public static void main(String args []) throws ParseException
  {
    MiniBasic parser = new MiniBasic(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter a program block");
      try
      {
        Stmt program;
        program = MiniBasic.giga_basic();
        System.out.println("Program: ");
        program.traverse(1);
        // Now call the next phase of the compiler
        // Like the global optimizer
        // Then the code generator
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MiniBasic.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(MiniBasic)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < PRINT : "print" >
| < IF : "if" >
| < ELSE : "else" >
| < INT : "int" >
| < REAL : "real" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < IDENT : (< LETTER > (< LETTER >|< DIGIT >)*) >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z","A"-"Z"] >
}

Stmt giga_basic() :
{
  Stmt block_link;
  for(String name:symTable.keySet()) {
    SymbolTable.Entry entry = symTable.get(name);
    System.out.println(name+entry);
  }
}
{
	block_link = block()
	{
	  return block_link;
	}
}

Stmt block() :
{
  Stmt block_node = new Stmt();
  Stmt tail = null;
  Stmt statement_link;
  block_node.type ="block";  
}
{
 < LBRACE > (statement_link = stmt() ";"
				{ if (statement_link!=null) { 
				  if (block_node.child==null)
						block_node.child = statement_link;
					else
						tail.next = statement_link;
					tail = statement_link;
				}
				}
 			)* < RBRACE >
 {
   return block_node;
 }
}

void variable() :
{
  Token dataType, variableName;
}
{
	( dataType=< INT > | dataType=< REAL > )
	variableName=< IDENT >
	{
		symTable.add(variableName.image, dataType.image);
	}
}

Stmt stmt() :
{
	Stmt statement=null;
}
{
(
  	statement = block()
| 	statement = assignment()
| 	statement = print_statement()
| 	statement = if_statement()
|   variable()
)
	{
		return statement;
	}
}

Stmt if_statement() :
{
  Stmt statement = new Stmt();
  statement.type="if";
  ExpNode exp;
}
{
	< IF >  "(" exp=expression() ")"
	{
	  statement.expression = exp;
	  return statement;
	}
}


Stmt print_statement() :
{
  Stmt print = new Stmt();
  print.type="print";
  ExpNode exp=null;
}
{
	< PRINT > (exp=expression() )?
	{
	  print.expression = exp;
	  return print;
	}
}

Stmt assignment() :
{
  	ExpNode asnmnt = new ExpNode();
  	ExpNode lvalue, rvalue;
  	Stmt statement = new Stmt();
  	statement.type="assignment";
  	statement.expression = asnmnt;
}
{
	lvalue=varref() "=" rvalue=expression()
	{
	  System.out.println("In Assignment");
	  asnmnt.operation = '=';
	  asnmnt.left = lvalue;
	  asnmnt.right= rvalue;
//		asnmnt.traverse();
//		System.out.println();
	  return statement;
	}
}

ExpNode expression() :
{ 	ExpNode root,lchild,rchild;
	Token operator;
}
{
  root=term()
  (
    (
      operator = < PLUS >
    | operator = < MINUS >
    )
    rchild=term()
    { lchild = root;
    	root = new ExpNode();
    	root.left = lchild;
    	root.right= rchild;
    	root.operation = operator.image.charAt(0);
   }
    
  )*
  {
    return root;
  }
}

ExpNode term() :
{
	ExpNode root,lchild,rchild;
	Token operator;
}
{
  root=element()
  (
    (
      operator = < MULTIPLY >
    | operator = < DIVIDE >
    )
    rchild=element()
    { lchild = root;
    	root = new ExpNode();
    	root.left = lchild;
    	root.right= rchild;
    	root.operation = operator.image.charAt(0);
   }
  )*
  {
    return root;
  }
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

ExpNode element() :
{ ExpNode factor;
	Token constant;}
{
  (
    
  	(
  	  constant=< CONSTANT >
  	  { factor = new ExpNode();
  	  factor.operation='c';
  	  factor.operand = constant.image;
  	}
  	)
	| factor=varref()
	| "(" factor=expression() ")"
  )
{
  return factor;
}
}

ExpNode varref() :
{
  ExpNode ref = new ExpNode();
  Token ident;
}
{
	ident=< IDENT >
	{
		ref.operation = 'r';
		ref.operand = ident.image;
		ref.left = null;
		ref.right= null;
		return ref;
	}
}

